apiVersion: v1
kind: ConfigMap
metadata:
  name: envoy-config
data:
  envoy.yaml: |
    static_resources:
      listeners:
        - name: listener_0
          address:
            socket_address:
              address: 0.0.0.0
              port_value: 10000
          filter_chains:
            - filters:
                - name: envoy.filters.network.http_connection_manager
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                    stat_prefix: ingress_http
                    route_config:
                      name: local_route
                      virtual_hosts:
                        - name: backend_services
                          domains: ["*"]
                          routes:
                            - match:
                                prefix: "/httpbin"
                              route:
                                cluster: httpbin_service
                                prefix_rewrite: "/"
                                rate_limits:
                                  - actions:
                                    - generic_key:
                                        descriptor_value: "httpbin_route"
                            - match: 
                                prefix: "/nginx"
                              route:
                                cluster: nginx_service
                                prefix_rewrite: "/"
                                rate_limits:
                                  - actions:
                                    - generic_key:  
                                        descriptor_value: "nginx_route"

                    http_filters:
                      # JWT Authentication
                      - name: envoy.filters.http.jwt_authn
                        typed_config:
                          "@type": type.googleapis.com/envoy.extensions.filters.http.jwt_authn.v3.JwtAuthentication
                          providers:
                            dummy_provider:
                              issuer: "test-issuer"
                              local_jwks:
                                inline_string: |
                                  {
                                    "keys": [
                                      {
                                        "kty": "oct",
                                        "kid": "testkey",
                                        "k": "dGVzdHNlY3JldA=="
                                      }
                                    ]
                                  }
                              forward: true
                          rules:
                            - match: { prefix: "/" }
                              requires:
                                provider_name: dummy_provider

                      # Global Rate Limit filter (no descriptors here!)
                      - name: envoy.filters.http.ratelimit
                        typed_config:
                          "@type": type.googleapis.com/envoy.extensions.filters.http.ratelimit.v3.RateLimit
                          domain: test_domain
                          timeout: 0.25s
                          failure_mode_deny: false
                          rate_limit_service:
                            grpc_service:
                              envoy_grpc:
                                cluster_name: ratelimit_global
                          enable_x_ratelimit_headers: DRAFT_VERSION_03

                      # RBAC Filter
                      - name: envoy.filters.http.rbac
                        typed_config:
                          "@type": type.googleapis.com/envoy.extensions.filters.http.rbac.v3.RBAC
                          rules:
                            action: ALLOW
                            policies:
                               allow-httpbin:
                                 permissions:
                                   - any: true
                                 principals:
                                   - any: true
                               allow-nginx-admin:
                                 permissions:
                                   - any: true
                                 principals:
                                   - metadata:
                                       filter: envoy.filters.http.jwt_authn
                                       path:
                                         - key: jwt_payload
                                         - key: role
                                       value:
                                         string_match:
                                           exact: "admin"

                      # Router
                      - name: envoy.filters.http.router
                        typed_config:
                          "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router

      clusters:
        - name: httpbin_service
          type: STRICT_DNS
          connect_timeout: 0.25s
          load_assignment:
            cluster_name: httpbin_service
            endpoints:
              - lb_endpoints:
                  - endpoint:
                      address:
                        socket_address:
                          address: httpbin
                          port_value: 80

        - name: nginx_service
          type: STRICT_DNS
          connect_timeout: 0.25s
          load_assignment:
            cluster_name: nginx_service
            endpoints:
              - lb_endpoints:
                  - endpoint:
                      address:
                        socket_address:
                          address: nginx
                          port_value: 80

        - name: ratelimit_global
          type: STRICT_DNS
          connect_timeout: 0.25s
          lb_policy: ROUND_ROBIN
          load_assignment:
            cluster_name: ratelimit_global
            endpoints:
              - lb_endpoints:
                  - endpoint:
                      address:
                        socket_address:
                          address: ratelimit-global
                          port_value: 8081

    admin:
      access_log_path: /tmp/admin_access.log
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 9901
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: httpbin
spec:
  replicas: 1
  selector:
    matchLabels:
      app: httpbin
  template:
    metadata:
      labels:
        app: httpbin
    spec:
      containers:
        - name: httpbin
          image: kennethreitz/httpbin
          ports:
            - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: httpbin
spec:
  ports:
    - port: 80
      targetPort: 80
  selector:
    app: httpbin
---
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
        - name: nginx
          image: nginx:latest
          ports:
            - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: nginx
spec:
  ports:
    - port: 80
      targetPort: 80
  selector:
    app: nginx
---
---

apiVersion: v1
kind: ConfigMap
metadata:
  name: ratelimit-config-global
data:
  config.yaml: |
    # Configuration for test_domain
    domain: test_domain
    descriptors:
      # HTTPBin route rate limiting: 2 requests per second
      - key: generic_key
        value: httpbin_route
        rate_limit:
          unit: second
          requests_per_unit: 2
      
      # Nginx route rate limiting: 5 requests per minute  
      - key: generic_key
        value: nginx_route
        rate_limit:
          unit: minute
          requests_per_unit: 5
      
      - key: role
        value: admin
        rate_limit:
          unit: second
          requests_per_unit: 2

---
# Simplified Redis deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-global
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis-global
  template:
    metadata:
      labels:
        app: redis-global
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        # Simple Redis setup without persistence for testing
        args: ["redis-server", "--bind", "0.0.0.0", "--protected-mode", "no"]

---
apiVersion: v1
kind: Service
metadata:
  name: redis-global
spec:
  selector:
    app: redis-global
  ports:
  - port: 6379
    targetPort: 6379

---
# CORRECTED ratelimit service deployment  
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ratelimit-global
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ratelimit-global
  template:
    metadata:
      labels:
        app: ratelimit-global
    spec:
      containers:
      - name: ratelimit
        image: envoyproxy/ratelimit:master
        ports:
        - containerPort: 8080
        - containerPort: 8081
        env:
        - name: USE_STATSD
          value: "false"
        - name: LOG_LEVEL
          value: "debug"
        - name: REDIS_SOCKET_TYPE
          value: "tcp"
        - name: REDIS_URL
          value: "redis-global:6379"
        # CRITICAL: These paths must match exactly
        - name: RUNTIME_ROOT
          value: "/data"
        - name: RUNTIME_SUBDIRECTORY
          value: "ratelimit"
        # Remove RUNTIME_APPDIRECTORY to use default
        volumeMounts:
        - name: config-volume
          mountPath: /data/ratelimit/config/config.yaml
          subPath: config.yaml
          readOnly: true
        # Add startup probe to give more time
        startupProbe:
          httpGet:
            path: /healthcheck
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 5
          failureThreshold: 12
        readinessProbe:
          httpGet:
            path: /healthcheck
            port: 8080
          initialDelaySeconds: 15
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /healthcheck  
            port: 8080
          initialDelaySeconds: 20
          periodSeconds: 30
        # Add command to debug
        command: ["/bin/ratelimit"]
      volumes:
      - name: config-volume
        configMap:
          name: ratelimit-config-global
          items:
          - key: config.yaml
            path: config.yaml

---
apiVersion: v1
kind: Service
metadata:
  name: ratelimit-global
spec:
  selector:
    app: ratelimit-global
  ports:
  - name: grpc
    port: 8081
    targetPort: 8081
  - name: http
    port: 8080
    targetPort: 8080

---

