Issues:
time="2025-09-18T03:28:24Z" level=warning msg="runtime: error reading /data/ratelimit/config/..data: read /data/ratelimit/config/..data: is a directory"
time="2025-09-18T03:28:24Z" level=warning msg="connecting to redis on redis-global:6379 with pool size 10"
time="2025-09-18T03:28:24Z" level=debug msg="Implicit pipelining enabled: false"
time="2025-09-18T03:28:24Z" level=debug msg="loading domain: test_domain"
time="2025-09-18T03:28:24Z" level=debug msg="Creating stats for key: 'test_domain.generic_key_httpbin_route'"
time="2025-09-18T03:28:24Z" level=debug msg="loading descriptor: key=test_domain.generic_key_httpbin_route ratelimit={requests_per_unit=2, unit=SECOND, unlimited=false, shadow_mode=false}"
time="2025-09-18T03:28:24Z" level=debug msg="Creating stats for key: 'test_domain.generic_key_nginx_route'"
time="2025-09-18T03:28:24Z" level=debug msg="loading descriptor: key=test_domain.generic_key_nginx_route ratelimit={requests_per_unit=5, unit=MINUTE, unlimited=false, shadow_mode=false}"
time="2025-09-18T03:28:24Z" level=info msg="Waiting for initial ratelimit config update event"
time="2025-09-18T03:28:24Z" level=error msg="Error loading new configuration: config.config.yaml: duplicate domain 'test_domain' in config file"
time="2025-09-18T03:28:24Z" level=info msg="Successfully loaded the initial ratelimit configs"
----------------
Root cause: Kubernetes mounts a ConfigMap as a directory that contains both the file (config.yaml) and a ..data symlink. 
The envoyproxy/ratelimit process was scanning the directory and ended up reading the same config twice (once through 
the file and once through the symlink), which produced duplicate domain 'test_domain' in config file and prevented the ratelimit 
config from being applied. The runtime: error reading /data/ratelimit/config/..data: is a directory warning is the giveaway.

Fix: Mount the ConfigMap key config.yaml as a single file into the exact path the ratelimit binary expects, rather than 
mounting the whole ConfigMap directory. Use subPath (or items: with the volume) so the pod sees only one file (no ..data duplication). 
After that the service will load the domain once and rate limiting will be enforced.

      containers:
      - name: ratelimit
        image: envoyproxy/ratelimit:master
        # ...
        env:
        - name: RUNTIME_ROOT
          value: "/data"
        - name: RUNTIME_SUBDIRECTORY
          value: "ratelimit"
        volumeMounts:
        - name: config-volume
          # Mount the single file (subPath) to the exact path ratelimit expects:
          mountPath: /data/ratelimit/config/config.yaml
          subPath: config.yaml
          readOnly: true
        # ...
      volumes:
      - name: config-volume
        configMap:
          name: ratelimit-config-global
          items:
          - key: config.yaml
            path: config.yaml



mountPath points to /data/ratelimit/config/config.yaml (this is the file ratelimit will read when 
RUNTIME_ROOT=/data and RUNTIME_SUBDIRECTORY=ratelimit).
subPath: config.yaml forces Kubernetes to mount only the single key as a file (no ..data directory 
entry will be visible inside /data/ratelimit/config).
volumes[..., items:] ensures only the config.yaml key is packaged into the volume.

