apiVersion: v1
kind: ConfigMap
metadata:
  name: envoy-config-global
data:
  envoy.yaml: |
    admin:
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 9901
    static_resources:
      listeners:
      - name: listener_0
        address:
          socket_address:
            address: 0.0.0.0
            port_value: 10000
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              stat_prefix: ingress_http
              access_log:
              - name: envoy.access_loggers.stdout
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.stream.v3.StdoutAccessLog
              route_config:
                name: local_route
                virtual_hosts:
                - name: default_host
                  domains: ["*"]
                  routes:
                  - match:
                      prefix: "/httpbin"
                    route:
                      cluster: httpbin_service
                      prefix_rewrite: "/"
                      rate_limits:
                      - actions:
                        - generic_key:
                            descriptor_value: "httpbin_route"
                  - match:
                      prefix: "/nginx"
                    route:
                      cluster: nginx_service
                      prefix_rewrite: "/"
                      rate_limits:
                      - actions:
                        - generic_key:
                            descriptor_value: "nginx_route"
                  - match:
                      prefix: "/"
                    route:
                      cluster: httpbin_service
              http_filters:
              - name: envoy.filters.http.cors
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.cors.v3.Cors
              - name: envoy.filters.http.ratelimit
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.ratelimit.v3.RateLimit
                  domain: test_domain
                  timeout: 0.25s
                  failure_mode_deny: false
                  rate_limit_service:
                    grpc_service:
                      envoy_grpc:
                        cluster_name: rate_limit_service
                      timeout: 0.25s
                  enable_x_ratelimit_headers: DRAFT_VERSION_03
              - name: envoy.filters.http.router
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
      clusters:
      - name: httpbin_service
        connect_timeout: 0.25s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: httpbin_service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: httpbin
                    port_value: 80
      - name: nginx_service
        connect_timeout: 0.25s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: nginx_service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: nginx
                    port_value: 80
      - name: rate_limit_service
        connect_timeout: 0.25s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        protocol_selection: USE_CONFIGURED_PROTOCOL
        http2_protocol_options: {}
        load_assignment:
          cluster_name: rate_limit_service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: ratelimit-global
                    port_value: 8081

---
# CORRECTED Global Rate Limiting Configuration
# Using the working approach with per-filter config

apiVersion: v1
kind: ConfigMap
metadata:
  name: ratelimit-config-global
data:
  config.yaml: |
    # Configuration for test_domain
    domain: test_domain
    descriptors:
      # HTTPBin route rate limiting: 2 requests per second
      - key: generic_key
        value: httpbin_route
        rate_limit:
          unit: second
          requests_per_unit: 2
      
      # Nginx route rate limiting: 5 requests per minute  
      - key: generic_key
        value: nginx_route
        rate_limit:
          unit: minute
          requests_per_unit: 5

---
# Simplified Redis deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-global
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis-global
  template:
    metadata:
      labels:
        app: redis-global
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        # Simple Redis setup without persistence for testing
        args: ["redis-server", "--bind", "0.0.0.0", "--protected-mode", "no"]

---
apiVersion: v1
kind: Service
metadata:
  name: redis-global
spec:
  selector:
    app: redis-global
  ports:
  - port: 6379
    targetPort: 6379

---
# CORRECTED ratelimit service deployment  
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ratelimit-global
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ratelimit-global
  template:
    metadata:
      labels:
        app: ratelimit-global
    spec:
      containers:
      - name: ratelimit
        image: envoyproxy/ratelimit:master
        ports:
        - containerPort: 8080
        - containerPort: 8081
        env:
        - name: USE_STATSD
          value: "false"
        - name: LOG_LEVEL
          value: "debug"
        - name: REDIS_SOCKET_TYPE
          value: "tcp"
        - name: REDIS_URL
          value: "redis-global:6379"
        # CRITICAL: These paths must match exactly
        - name: RUNTIME_ROOT
          value: "/data"
        - name: RUNTIME_SUBDIRECTORY
          value: "ratelimit"
        # Remove RUNTIME_APPDIRECTORY to use default
        volumeMounts:
        - name: config-volume
          mountPath: /data/ratelimit/config/config.yaml
          subPath: config.yaml
          readOnly: true
        # Add startup probe to give more time
        startupProbe:
          httpGet:
            path: /healthcheck
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 5
          failureThreshold: 12
        readinessProbe:
          httpGet:
            path: /healthcheck
            port: 8080
          initialDelaySeconds: 15
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /healthcheck  
            port: 8080
          initialDelaySeconds: 20
          periodSeconds: 30
        # Add command to debug
        command: ["/bin/ratelimit"]
      volumes:
      - name: config-volume
        configMap:
          name: ratelimit-config-global
          items:
          - key: config.yaml
            path: config.yaml

---
apiVersion: v1
kind: Service
metadata:
  name: ratelimit-global
spec:
  selector:
    app: ratelimit-global
  ports:
  - name: grpc
    port: 8081
    targetPort: 8081
  - name: http
    port: 8080
    targetPort: 8080

---
# HTTPBin service (if not exists)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: httpbin
spec:
  replicas: 1
  selector:
    matchLabels:
      app: httpbin
  template:
    metadata:
      labels:
        app: httpbin
    spec:
      containers:
      - name: httpbin
        image: kennethreitz/httpbin
        ports:
        - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: httpbin
spec:
  selector:
    app: httpbin
  ports:
  - port: 80
    targetPort: 80

---
# Nginx service (if not exists)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:alpine
        ports:
        - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: nginx
spec:
  selector:
    app: nginx
  ports:
  - port: 80
    targetPort: 80

---

# Envoy deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: envoy-global
spec:
  replicas: 1
  selector:
    matchLabels:
      app: envoy-global
  template:
    metadata:
      labels:
        app: envoy-global
    spec:
      containers:
      - name: envoy
        image: envoyproxy/envoy:v1.31.2
        args: ["-c", "/etc/envoy/envoy.yaml", "--log-level", "debug"]
        ports:
        - containerPort: 10000
        - containerPort: 9901
        volumeMounts:
        - name: envoy-config
          mountPath: /etc/envoy
        readinessProbe:
          httpGet:
            path: /ready
            port: 9901
          initialDelaySeconds: 10
          periodSeconds: 10
      volumes:
      - name: envoy-config
        configMap:
          name: envoy-config-global

---
apiVersion: v1
kind: Service
metadata:
  name: envoy-global
spec:
  type: NodePort
  selector:
    app: envoy-global
  ports:
  - name: http
    port: 10000
    targetPort: 10000
    nodePort: 30081
    protocol: TCP
  - name: admin
    port: 9901
    targetPort: 9901
    nodePort: 30901
    protocol: TCP

