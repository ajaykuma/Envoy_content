kubectl apply -f final-deployment.yaml
kubectl get pods -w

chmod +x test_rate_limiting.sh
./test_rate_limiting.sh

> Testing
kubectl logs -f deploy/ratelimit-global
> Look for "loading domain: test_domain" and NOT "duplicate domain"
controlplane:~$ kubectl logs deploy/ratelimit-global | grep -i "loading descriptor\|loaded domain\|Error loading new configuration"
time="2025-09-18T03:52:31Z" level=debug msg="loading descriptor: key=test_domain.generic_key_httpbin_route ratelimit={requests_per_unit=2, unit=SECOND, unlimited=false, shadow_mode=false}"
time="2025-09-18T03:52:31Z" level=debug msg="loading descriptor: key=test_domain.generic_key_nginx_route ratelimit={requests_per_unit=5, unit=MINUTE, unlimited=false, shadow_mode=false}"

> Inspected mounted file inside the ratelimit pod:
POD=$(kubectl get pods -l app=ratelimit-global -o jsonpath='{.items[0].metadata.name}')
kubectl exec -it $POD -- ls -la /data/ratelimit/config
kubectl exec -it $POD -- cat /data/ratelimit/config/config.yaml

> Test from your control plane (parallel burst to trigger rate-limit quickly):
for i in {1..6}; do curl -s -o /dev/null -w "%{http_code}\n" http://172.30.1.2:30081/httpbin/get & done; wait
[1] 219562
[2] 219563
[3] 219564
[4] 219565
[5] 219566
[6] 219567
200
200
[1]   Done                    curl -s -o /dev/null -w "%{http_code}\n" http://172.30.1.2:30081/httpbin/get
[2]   Done                    curl -s -o /dev/null -w "%{http_code}\n" http://172.30.1.2:30081/httpbin/get
429
429
429
429
[3]   Done                    curl -s -o /dev/null -w "%{http_code}\n" http://172.30.1.2:30081/httpbin/get
[4]   Done                    curl -s -o /dev/null -w "%{http_code}\n" http://172.30.1.2:30081/httpbin/get
[5]-  Done                    curl -s -o /dev/null -w "%{http_code}\n" http://172.30.1.2:30081/httpbin/get
[6]+  Done                    curl -s -o /dev/null -w "%{http_code}\n" http://172.30.1.2:30081/httpbin/get

> For nginx
for i in {1..7}; do curl -s -o /dev/null -w "%{http_code}\n" http://172.30.1.2:30081/nginx & done; wait
controlplane:~$ for i in {1..7}; do curl -s -o /dev/null -w "%{http_code}\n" http://172.30.1.2:30081/nginx & done; wait
[1] 220100
[2] 220101
[3] 220102
[4] 220103
[5] 220104
[6] 220105
[7] 220106
429
200
200
200
200
429
[1]   Done                    curl -s -o /dev/null -w "%{http_code}\n" http://172.30.1.2:30081/nginx
[4]   Done                    curl -s -o /dev/null -w "%{http_code}\n" http://172.30.1.2:30081/nginx
[7]+  Done                    curl -s -o /dev/null -w "%{http_code}\n" http://172.30.1.2:30081/nginx
200
[2]   Done                    curl -s -o /dev/null -w "%{http_code}\n" http://172.30.1.2:30081/nginx
[3]   Done                    curl -s -o /dev/null -w "%{http_code}\n" http://172.30.1.2:30081/nginx
[5]-  Done                    curl -s -o /dev/null -w "%{http_code}\n" http://172.30.1.2:30081/nginx

--envoy admin 
kubectl port-forward svc/envoy-global 9901:9901
curl http://localhost:9901/clusters

--check rate limit stats
curl http://localhost:9901/stats?filter=ratelimit

Refer: Issues.txt (for details)
Rfer: Instructions.txt file in deployments-mc (folder)

