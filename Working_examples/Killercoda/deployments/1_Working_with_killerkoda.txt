##Start a KillerCoda Kubernetes Playground
Go to https://killercoda.com/playgrounds

Choose Kubernetes → Start Scenario (you’ll get a fresh cluster with kubectl pre-installed).
---------------
controlplane:~$ kubectl cluster-info
Kubernetes control plane is running at https://172.30.1.2:6443
CoreDNS is running at https://172.30.1.2:6443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy

To further debug and diagnose cluster problems, use 'kubectl cluster-info dump'.
controlplane:~$ kubectl get nodes
NAME           STATUS   ROLES           AGE   VERSION
controlplane   Ready    control-plane   20d   v1.33.2
node01         Ready    <none>          20d   v1.33.2

controlplane:~$ kubectl get deployments
No resources found in default namespace.

controlplane:~$ kubectl get pods       
No resources found in default namespace.

controlplane:~$ kubectl get services
NAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE
kubernetes   ClusterIP   10.96.0.1    <none>        443/TCP   20d

controlplane:~$ kubectl get namespaces
NAME                 STATUS   AGE
default              Active   20d
kube-node-lease      Active   20d
kube-public          Active   20d
kube-system          Active   20d
local-path-storage   Active   20d

controlplane:~$ docker ps 
CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES

controlplane:~$ docker container ls
CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES

##Deploy Sample Backends

Let’s add two services (httpbin and nginx) that Envoy can route traffic to.

controlplane:~$ mkdir deployments
controlplane:~$ cd deployments

## backends.yaml
controlplane:~$ vi backends.yaml

# httpbin deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: httpbin
spec:
  replicas: 1
  selector:
    matchLabels:
      app: httpbin
  template:
    metadata:
      labels:
        app: httpbin
    spec:
      containers:
      - name: httpbin
        image: kennethreitz/httpbin
        ports:
        - containerPort: 80
---
# nginx deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx
        ports:
        - containerPort: 80

---------------
##Services
vi services.yaml
# NodePort service for Envoy
apiVersion: v1
kind: Service
metadata:
  name: envoy
spec:
  type: NodePort
  selector:
    app: envoy
  ports:
  - port: 10000
    targetPort: 10000
    nodePort: 30080
---
# httpbin service
apiVersion: v1
kind: Service
metadata:
  name: httpbin
spec:
  selector:
    app: httpbin
  ports:
  - port: 80
    targetPort: 80
---
# nginx service
apiVersion: v1
kind: Service
metadata:
  name: nginx
spec:
  selector:
    app: nginx
  ports:
  - port: 80
    targetPort: 80

------------
##Create Envoy ConfigMap

This config will route:
/httpbin/* → httpbin service
/nginx/* → nginx service

vi envoy-config.yaml
# envoy-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: envoy-config
data:
  envoy.yaml: |
    static_resources:
      listeners:
      - name: listener_0
        address:
          socket_address: { address: 0.0.0.0, port_value: 10000 }
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              stat_prefix: ingress_http
              route_config:
                name: local_route
                virtual_hosts:
                - name: backend
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/httpbin" }
                    route:
                      cluster: httpbin_service
                      prefix_rewrite: "/"
                  - match: { prefix: "/nginx" }
                    route:
                      cluster: nginx_service
                      prefix_rewrite: "/"
              http_filters:
              - name: envoy.filters.http.router
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
      clusters:
      - name: httpbin_service
        connect_timeout: 0.25s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: httpbin_service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: httpbin
                    port_value: 80
      - name: nginx_service
        connect_timeout: 0.25s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: nginx_service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: nginx
                    port_value: 80
    admin:
      access_log_path: /tmp/admin_access.log
      address:
        socket_address: { address: 0.0.0.0, port_value: 9901 }

----------------
##
vi envoy-deployment.yaml
# envoy-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: envoy
  labels:
    app: envoy
spec:
  replicas: 1
  selector:
    matchLabels:
      app: envoy
  template:
    metadata:
      labels:
        app: envoy
    spec:
      containers:
      - name: envoy
        image: envoyproxy/envoy:v1.31.2
        args: ["-c", "/etc/envoy/envoy.yaml", "--log-level", "info"]
        ports:
        - containerPort: 10000
        - containerPort: 9901
        volumeMounts:
        - name: envoy-config
          mountPath: /etc/envoy
      volumes:
      - name: envoy-config
        configMap:
          name: envoy-config

controlplane:~$ kubectl apply -f envoy-config.yaml
configmap/envoy-config configured
controlplane:~$ kubectl apply -f envoy-deployment.yaml
deployment.apps/envoy configured
controlplane:~$ kubectl apply -f services.yaml
service/nginx configured
controlplane:~$ kubectl apply -f backends.yaml
deployment.apps/nginx configured

controlplane:~/deployments$ kubectl get svc
NAME         TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)           AGE
envoy        NodePort    10.101.148.50   <none>        10000:30080/TCP   7s
httpbin      ClusterIP   10.101.3.107    <none>        80/TCP            7s
kubernetes   ClusterIP   10.96.0.1       <none>        443/TCP           22d
nginx        ClusterIP   10.102.146.61   <none>        80/TCP            7m33s

controlplane:~/deployments$ kubectl get pods
NAME                       READY   STATUS    RESTARTS   AGE
envoy-8f758f8b5-hq2nm      1/1     Running   0          7m46s
httpbin-56cc78c99f-jkxsf   1/1     Running   0          19s
nginx-86c57bc6b8-dkxr7     1/1     Running   0          7m31s

controlplane:~/deployments$ kubectl get nodes -o wide
NAME           STATUS   ROLES           AGE   VERSION   INTERNAL-IP   EXTERNAL-IP   OS-IMAGE             KERNEL-VERSION     CONTAINER-RUNTIME
controlplane   Ready    control-plane   22d   v1.33.2   172.30.1.2    <none>        Ubuntu 24.04.1 LTS   6.8.0-51-generic   containerd://1.7.27
node01         Ready    <none>          22d   v1.33.2   172.30.2.2    <none>        Ubuntu 24.04.1 LTS   6.8.0-51-generic   containerd://1.7.27

controlplane:~$ kubectl get pods -l app=envoy
NAME                     READY   STATUS    RESTARTS   AGE
envoy-5b6f4df6b4-nsmks   1/1     Running   0          2m37s

#Envoy running as a reverse proxy in front of httpbin and nginx
-----------------
#Note**
#when we do curl ,Envoy forwards it to httpbin:80/httpbin/get

controlplane:~/deployments$ curl http://172.30.1.2:30080/httpbin/get
{
  "args": {}, 
  "headers": {
    "Accept": "*/*", 
    "Host": "172.30.1.2:30080", 
    "User-Agent": "curl/8.5.0", 
    "X-Envoy-Expected-Rq-Timeout-Ms": "15000", 
    "X-Envoy-Original-Path": "/httpbin/get"
  }, 
  "origin": "192.168.1.7", 
  "url": "http://172.30.1.2:30080/get"
}


#Test nginx route:
#Should return the nginx default HTML page.
controlplane:~/deployments$ curl http://172.30.1.2:30080/nginx      
<!DOCTYPE html>
<html>
<head>
<title>Welcome to nginx!</title>
<style>
html { color-scheme: light dark; }
body { width: 35em; margin: 0 auto;
font-family: Tahoma, Verdana, Arial, sans-serif; }
</style>
</head>
<body>
<h1>Welcome to nginx!</h1>
<p>If you see this page, the nginx web server is successfully installed and
working. Further configuration is required.</p>

<p>For online documentation and support please refer to
<a href="http://nginx.org/">nginx.org</a>.<br/>
Commercial support is available at
<a href="http://nginx.com/">nginx.com</a>.</p>

<p><em>Thank you for using nginx.</em></p>
</body>
</html>

#Test httpbin endpoints:
curl http://172.30.1.2:30080/httpbin/ip
curl http://172.30.1.2:30080/httpbin/headers
curl http://172.30.1.2:30080/httpbin/status/418

#refer other examples in Instructions.txt file
------------------

##Add Access Logs in Envoy Config
#By default, our config doesn’t have access logs enabled inside the 
#HTTP connection manager.

#update
envoy-config.yaml
- name: envoy.filters.network.http_connection_manager
  typed_config:
    "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
    stat_prefix: ingress_http
    route_config:
      name: local_route
      virtual_hosts:
      - name: backend
        domains: ["*"]
        routes:
        - match: { prefix: "/httpbin" }
          route:
            cluster: httpbin_service
            prefix_rewrite: "/"
        - match: { prefix: "/nginx" }
          route:
            cluster: nginx_service
            prefix_rewrite: "/"
    http_filters:
    - name: envoy.filters.http.router
      typed_config:
        "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
    access_log:                                        #Adding logs
    - name: envoy.access_loggers.stdout
      typed_config:
        "@type": type.googleapis.com/envoy.extensions.access_loggers.stream.v3.StdoutAccessLog
        log_format:
          text_format: "[%START_TIME%] \"%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%\" %RESPONSE_CODE% cluster=%UPSTREAM_CLUSTER% upstream_host=%UPSTREAM_HOST% user-agent=\"%REQ(USER-AGENT)%\"\n"

#apply
kubectl apply -f envoy-config.yaml

#restart
kubectl delete pod -l app=envoy   # restart Envoy to reload config

#send requests
for i in {1..5}; do curl -s http://172.30.1.2:30080/httpbin/ip > /dev/null; done

#check logs
kubectl logs -l app=envoy

##add latency (request duration) to the Envoy access logs.
#Envoy exposes this as %DURATION% (milliseconds from request start to finish).
#modified access_log section:
    access_log:
    - name: envoy.access_loggers.stdout
      typed_config:
        "@type": type.googleapis.com/envoy.extensions.access_loggers.stream.v3.StdoutAccessLog
        log_format:
          text_format: |
            [%START_TIME%] "%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%" 
            %RESPONSE_CODE% cluster=%UPSTREAM_CLUSTER% upstream_host=%UPSTREAM_HOST% 
            duration=%DURATION%ms user-agent="%REQ(USER-AGENT)%"

#Apply and restart
kubectl apply -f envoy-config.yaml
kubectl delete pod -l app=envoy

#Generate traffic
for i in {1..5}; do curl -s http://172.30.1.2:30080/httpbin/delay/1 > /dev/null; done

--(/httpbin/delay/1 forces a 1-second response)

#check logs
kubectl logs -l app=envoy
#should show
upstream_host → which pod handled the request
duration=1003ms → latency measured by Envoy

=================================================================================
#cleaning up
controlplane:~$ kubectl delete pods --all
pod "envoy-5b6f4df6b4-nsmks" deleted
pod "httpbin-56cc78c99f-sqnn4" deleted
pod "nginx-64598b8f46-fwdpv" deleted
controlplane:~$ kubectl delete deployment --all
deployment.apps "envoy" deleted
deployment.apps "httpbin" deleted
deployment.apps "nginx" deleted
controlplane:~$ kubectl delete svc --all
service "envoy" deleted
service "httpbin" deleted
service "kubernetes" deleted
service "nginx" deleted
controlplane:~$ kubectl delete configmap --all
configmap "envoy-config" deleted
configmap "kube-root-ca.crt" deleted

#delete everything in namespace
controlplane:~$ kubectl delete all --all
service "kubernetes" deleted






